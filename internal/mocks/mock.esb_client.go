// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"
	esb_ports "gin-framework-boilerplate/internal/ports/clients/esb"
	custom_errors "gin-framework-boilerplate/pkg/errors"

	mock "github.com/stretchr/testify/mock"
)

// ESBClient is an autogenerated mock type for the ESBClient type
type ESBClient struct {
	mock.Mock
}

// Sample provides a mock function with given fields: ctx
func (_m *ESBClient) Sample(ctx context.Context) (esb_ports.GeneralResponseDTO, custom_errors.CustomError) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Sample")
	}

	var r0 esb_ports.GeneralResponseDTO
	var r1 custom_errors.CustomError
	if rf, ok := ret.Get(0).(func(context.Context) (esb_ports.GeneralResponseDTO, custom_errors.CustomError)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) esb_ports.GeneralResponseDTO); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(esb_ports.GeneralResponseDTO)
	}

	if rf, ok := ret.Get(1).(func(context.Context) custom_errors.CustomError); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(custom_errors.CustomError)
		}
	}

	return r0, r1
}

// NewESBClient creates a new instance of ESBClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewESBClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ESBClient {
	mock := &ESBClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
