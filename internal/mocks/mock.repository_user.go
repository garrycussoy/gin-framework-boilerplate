// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "gin-framework-boilerplate/internal/ports/repository/dto"

	mock "github.com/stretchr/testify/mock"

	records "gin-framework-boilerplate/internal/ports/repository/records"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// GetUserByEmail provides a mock function with given fields: ctx, email
func (_m *UserRepository) GetUserByEmail(ctx context.Context, email string) (records.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 records.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (records.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) records.User); ok {
		r0 = rf(ctx, email)
	} else {
		r0 = ret.Get(0).(records.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: ctx, userFilter
func (_m *UserRepository) GetUsers(ctx context.Context, userFilter dto.UserFilterDto) ([]records.User, error) {
	ret := _m.Called(ctx, userFilter)

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []records.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserFilterDto) ([]records.User, error)); ok {
		return rf(ctx, userFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.UserFilterDto) []records.User); ok {
		r0 = rf(ctx, userFilter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]records.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.UserFilterDto) error); ok {
		r1 = rf(ctx, userFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
